diff --git a/node_modules/kontra/kontra.mjs b/node_modules/kontra/kontra.mjs
index fc1d632..acb629d 100644
--- a/node_modules/kontra/kontra.mjs
+++ b/node_modules/kontra/kontra.mjs
@@ -295,13 +295,13 @@ function collides(obj1, obj2) {
  * @returns {{x: Number, y: Number, width: Number, height: Number}} The world `x`, `y`, `width`, and `height` of the object.
  */
 function getWorldRect(obj) {
-  let { x = 0, y = 0, width, height, radius } = obj.world || obj;
+  let { x, y, width, height } = obj;
 
   // take into account tileEngine
-  if (obj.mapwidth) {
-    width = obj.mapwidth;
-    height = obj.mapheight;
-  }
+  // if (obj.mapwidth) {
+  //   width = obj.mapwidth;
+  //   height = obj.mapheight;
+  // }
 
   // @ifdef GAMEOBJECT_RADIUS
   // account for circle
@@ -411,13 +411,17 @@ function removeFromArray(array, item) {
  * @returns {Boolean} True if objects collide.
  */
 function circleRectCollision(circle, rect) {
-  let { x, y, width, height } = getWorldRect(rect);
+  let { x, y, width, height } = rect
+  if (rect.anchor) {
+    x -= width * rect.anchor.x;
+    y -= height * rect.anchor.y;
+  }
 
   // account for camera
-  do {
-    x -= rect.sx || 0;
-    y -= rect.sy || 0;
-  } while ((rect = rect.parent));
+  // do {
+  //   x -= rect.sx || 0;
+  //   y -= rect.sy || 0;
+  // } while ((rect = rect.parent));
 
   let dx = circle.x - Math.max(x, Math.min(circle.x, x + width));
   let dy = circle.y - Math.max(y, Math.min(circle.y, y + height));
@@ -554,17 +558,14 @@ function getContext() {
  *
  * @returns {{canvas: HTMLCanvasElement, context: CanvasRenderingContext2D}} An object with properties `canvas` and `context`. `canvas` it the canvas element for the game and `context` is the context object the game draws to.
  */
-function init$1(canvas, { contextless = false } = {}) {
+function init$1() {
   // check if canvas is a string first, an element next, or default to
   // getting first canvas on page
-  canvasEl =
-    document.getElementById(canvas) ||
-    canvas ||
-    document.querySelector('canvas');
+  canvasEl =document.querySelector('canvas');
 
-  if (contextless) {
-    canvasEl = canvasEl || new Proxy({}, handler$1);
-  }
+  // if (contextless) {
+  //   canvasEl = canvasEl || new Proxy({}, handler$1);
+  // }
 
   // @ifdef DEBUG
   if (!canvasEl) {
@@ -2359,7 +2360,7 @@ class GameObject extends Updatable {
 
   // @ifdef GAMEOBJECT_GROUP
   set children(value) {
-    this.removeChild(this._c);
+    // this.removeChild(this._c);
     this.addChild(value);
   }
 
@@ -2419,21 +2420,21 @@ class GameObject extends Updatable {
     });
   }
 
-  /**
-   * Remove an object as a child of this object. The removed objects [world](api/gameObject#world) property will be updated to not take into account this object and all of its parents.
-   * @memberof GameObject
-   * @function removeChild
-   *
-   * @param {...(GameObject|GameObject[])[]} objects - Object to remove as a child. Can be a single object, an array of objects, or a comma-separated list of objects.
-   */
-  removeChild(...objects) {
-    objects.flat().map(child => {
-      if (removeFromArray(this.children, child)) {
-        child.parent = null;
-        child._pc();
-      }
-    });
-  }
+  // /**
+  //  * Remove an object as a child of this object. The removed objects [world](api/gameObject#world) property will be updated to not take into account this object and all of its parents.
+  //  * @memberof GameObject
+  //  * @function removeChild
+  //  *
+  //  * @param {...(GameObject|GameObject[])[]} objects - Object to remove as a child. Can be a single object, an array of objects, or a comma-separated list of objects.
+  //  */
+  // removeChild(...objects) {
+  //   objects.flat().map(child => {
+  //     if (removeFromArray(this.children, child)) {
+  //       child.parent = null;
+  //       child._pc();
+  //     }
+  //   });
+  // }
   // @endif
 
   // --------------------------------------------------
@@ -2827,7 +2828,9 @@ class Text extends GameObject {
      * @memberof Text
      * @property {String} textAlign
      */
-    textAlign = '',
+    textAlign = 'center',
+    anchor = { x: 0, y: 0.5 },
+    color = '#fff',
 
     /**
      * The distance between two lines of text. The value is multiplied by the texts font size.
@@ -2858,7 +2861,7 @@ class Text extends GameObject {
       text,
       textAlign,
       lineHeight,
-      font,
+      font,color,anchor,
       ...props
     });
 
@@ -3110,7 +3113,7 @@ function factory$7() {
 // objects would block it later in the render order
 let pointers = new WeakMap();
 let callbacks$1 = {};
-let pressedButtons = {};
+let pressedButtons = false
 
 /**
  * A map of pointer button indices to button names. Modify this object to expand the list of [available buttons](api/pointer#available-buttons).
@@ -3197,51 +3200,10 @@ function getCanvasOffset(pointer) {
   // we need to account for CSS scale, transform, border, padding,
   // and margin in order to get the correct scale and offset of the
   // canvas
-  let { canvas, _s } = pointer;
+  let { canvas } = pointer;
   let rect = canvas.getBoundingClientRect();
 
-  // @see https://stackoverflow.com/a/53405390/2124254
-  let transform =
-    _s.transform != 'none'
-      ? _s.transform.replace('matrix(', '').split(',')
-      : [1, 1, 1, 1];
-  let transformScaleX = parseFloat(transform[0]);
-  let transformScaleY = parseFloat(transform[3]);
-
-  // scale transform applies to the border and padding of the element
-  let borderWidth =
-    (getPropValue(_s, 'border-left-width') +
-      getPropValue(_s, 'border-right-width')) *
-    transformScaleX;
-  let borderHeight =
-    (getPropValue(_s, 'border-top-width') +
-      getPropValue(_s, 'border-bottom-width')) *
-    transformScaleY;
-
-  let paddingWidth =
-    (getPropValue(_s, 'padding-left') +
-      getPropValue(_s, 'padding-right')) *
-    transformScaleX;
-  let paddingHeight =
-    (getPropValue(_s, 'padding-top') +
-      getPropValue(_s, 'padding-bottom')) *
-    transformScaleY;
-
-  return {
-    scaleX: (rect.width - borderWidth - paddingWidth) / canvas.width,
-    scaleY:
-      (rect.height - borderHeight - paddingHeight) / canvas.height,
-    offsetX:
-      rect.left +
-      (getPropValue(_s, 'border-left-width') +
-        getPropValue(_s, 'padding-left')) *
-        transformScaleX,
-    offsetY:
-      rect.top +
-      (getPropValue(_s, 'border-top-width') +
-        getPropValue(_s, 'padding-top')) *
-        transformScaleY
-  };
+  return { scaleX: 1, scaleY: 1, offsetX: rect.left, offsetY: rect.top };
 }
 
 /**
@@ -3251,8 +3213,8 @@ function getCanvasOffset(pointer) {
  */
 function pointerDownHandler(evt) {
   // touchstart should be treated like a left mouse button
-  let button = evt.button != null ? pointerMap[evt.button] : 'left';
-  pressedButtons[button] = true;
+  // let button = evt.button != null ? pointerMap[evt.button] : 'left';
+  pressedButtons = true;
   pointerHandler(evt, 'onDown');
 }
 
@@ -3262,8 +3224,8 @@ function pointerDownHandler(evt) {
  * @param {MouseEvent|TouchEvent} evt
  */
 function pointerUpHandler(evt) {
-  let button = evt.button != null ? pointerMap[evt.button] : 'left';
-  pressedButtons[button] = false;
+  // let button = evt.button != null ? pointerMap[evt.button] : 'left';
+  pressedButtons = false;
   pointerHandler(evt, 'onUp');
 }
 
@@ -3326,7 +3288,12 @@ function pointerHandler(evt, eventName) {
 
   let canvas = evt.target;
   let pointer = pointers.get(canvas);
-  let { scaleX, scaleY, offsetX, offsetY } = getCanvasOffset(pointer);
+  // let { scaleX, scaleY, offsetX, offsetY } = getCanvasOffset(pointer);
+  let rect =canvas.getBoundingClientRect()
+  let scaleX= 1, scaleY= 1, offsetX= rect.left, offsetY= rect.top
+
+
+  // let scaleX =1, scaleY =1, offsetX=0, offsetY=0
   let isTouchEvent = evt.type.includes('touch');
 
   if (isTouchEvent) {
@@ -3652,7 +3619,7 @@ function offPointer(direction) {
  * @returns {Boolean} `true` if the button is pressed, `false` otherwise.
  */
 function pointerPressed(button) {
-  return !!pressedButtons[button];
+  return !!pressedButtons;
 }
 
 /**
@@ -4030,14 +3997,14 @@ function GameLoop({
   let step = 1 / fps;
   let clearFn = clearCanvas ? clear : noop;
   let last, rAF, now, dt, loop;
-  let focused = true;
+  window.__focused = true;
 
   if (!blur) {
     window.addEventListener('focus', () => {
-      focused = true;
+      window.__focused = true;
     });
     window.addEventListener('blur', () => {
-      focused = false;
+      window.__focused = false;
     });
   }
 
@@ -4052,7 +4019,7 @@ function GameLoop({
     rAF = requestAnimationFrame(frame);
 
     // don't update the frame if tab isn't focused
-    if (!focused) return;
+    if (!window.__focused) return;
 
     now = performance.now();
     dt = now - last;
@@ -6455,7 +6422,7 @@ class Scene {
       // move all objects to be in the scenes DOM node so we can
       // hide and show the DOM node and thus hide and show all the
       // objects
-      this._dn.append(...getAllNodes(object));
+      // this._dn.append(...getAllNodes(object));
     });
   }
 
@@ -6488,15 +6455,15 @@ class Scene {
      * @memberof Scene
      * @property {Boolean} hidden
      */
-    this.hidden = this._dn.hidden = false;
+    this.hidden =  false;
 
     // find first focusable object
-    let focusableObject = this._o.find(object => object.focus);
-    if (focusableObject) {
-      focusableObject.focus(focusParams);
-    } else {
-      this._dn.focus(focusParams);
-    }
+    // let focusableObject = this._o.find(object => object.focus);
+    // if (focusableObject) {
+    //   focusableObject.focus(focusParams);
+    // } else {
+    //   this._dn.focus(focusParams);
+    // }
 
     this.onShow();
   }
@@ -6507,7 +6474,7 @@ class Scene {
    * @function hide
    */
   hide() {
-    this.hidden = this._dn.hidden = true;
+    this.hidden = true;
     this.onHide();
   }
 
@@ -6518,7 +6485,7 @@ class Scene {
    */
   destroy() {
     off('init', this._i);
-    this._dn.remove();
+    // this._dn.remove();
     this._o.map(object => object.destroy && object.destroy());
   }
 
