diff --git a/node_modules/kontra/kontra.js b/node_modules/kontra/kontra.js
index 3dd1ba6..1b3f26a 100644
--- a/node_modules/kontra/kontra.js
+++ b/node_modules/kontra/kontra.js
@@ -356,7 +356,7 @@ var kontra = (function () {
     return obj1[prop] - obj2[prop];
   }
 
-  let noop = () => {};
+  let noop = () => { };
 
   // style used for DOM nodes needed for screen readers
   let srOnlyStyle =
@@ -1114,7 +1114,7 @@ var kontra = (function () {
         imageAssets[getName(url)] =
           imageAssets[resolvedUrl] =
           imageAssets[fullUrl] =
-            this;
+          this;
         emit('assetLoaded', this, url);
         resolve(this);
       };
@@ -1172,8 +1172,8 @@ var kontra = (function () {
             playableSource
               ? playableSource
               : canPlay[getExtension(source)]
-              ? source
-              : null,
+                ? source
+                : null,
           0
         ); // 0 is the shortest falsy value
 
@@ -1193,7 +1193,7 @@ var kontra = (function () {
         audioAssets[getName(url)] =
           audioAssets[resolvedUrl] =
           audioAssets[fullUrl] =
-            this;
+          this;
         emit('assetLoaded', this, url);
         resolve(this);
       });
@@ -1253,7 +1253,7 @@ var kontra = (function () {
         dataAssets[getName(url)] =
           dataAssets[resolvedUrl] =
           dataAssets[fullUrl] =
-            response;
+          response;
         emit('assetLoaded', response, url);
         return response;
       });
@@ -1292,8 +1292,8 @@ var kontra = (function () {
         return extension.match(imageRegex)
           ? loadImage(asset)
           : extension.match(audioRegex)
-          ? loadAudio(asset)
-          : loadData(asset);
+            ? loadAudio(asset)
+            : loadData(asset);
       })
     );
   }
@@ -1776,7 +1776,7 @@ var kontra = (function () {
     }
     // @endif
 
-    _pc() {}
+    _pc() { }
   }
 
   /**
@@ -2176,7 +2176,7 @@ var kontra = (function () {
      * @memberof GameObject
      * @function draw
      */
-    draw() {}
+    draw() { }
 
     /**
      * Sync property changes from the parent to the child
@@ -3006,8 +3006,8 @@ var kontra = (function () {
         textAlign == 'right'
           ? this.width
           : textAlign == 'center'
-          ? (this.width / 2) | 0
-          : 0;
+            ? (this.width / 2) | 0
+            : 0;
       // @endif
 
       this._s.map((str, index) => {
@@ -3237,12 +3237,12 @@ var kontra = (function () {
         rect.left +
         (getPropValue(_s, 'border-left-width') +
           getPropValue(_s, 'padding-left')) *
-          transformScaleX,
+        transformScaleX,
       offsetY:
         rect.top +
         (getPropValue(_s, 'border-top-width') +
           getPropValue(_s, 'padding-top')) *
-          transformScaleY
+        transformScaleY
     };
   }
 
@@ -3895,28 +3895,28 @@ var kontra = (function () {
      * @memberof Button
      * @function onEnable
      */
-    onEnable() {}
+    onEnable() { }
 
     /**
      * Function called when then button is disabled. Override this function to have the button do something when disabled.
      * @memberof Button
      * @function onDisable
      */
-    onDisable() {}
+    onDisable() { }
 
     /**
      * Function called when then button is focused. Override this function to have the button do something when focused.
      * @memberof Button
      * @function onFocus
      */
-    onFocus() {}
+    onFocus() { }
 
     /**
      * Function called when then button is blurred. Override this function to have the button do something when blurred.
      * @memberof Button
      * @function onBlur
      */
-    onBlur() {}
+    onBlur() { }
 
     onDown() {
       if (!this.disabled) {
@@ -4301,8 +4301,8 @@ var kontra = (function () {
     let pads = navigator.getGamepads
       ? navigator.getGamepads()
       : navigator.webkitGetGamepads
-      ? navigator.webkitGetGamepads
-      : [];
+        ? navigator.webkitGetGamepads
+        : [];
 
     for (let i = 0; i < pads.length; i++) {
       let gamepad = pads[i];
@@ -4649,8 +4649,8 @@ var kontra = (function () {
             ? 'left'
             : 'right'
           : y < 0
-          ? 'up'
-          : 'down';
+            ? 'up'
+            : 'down';
       }
     },
     pinch: {
@@ -4985,8 +4985,8 @@ var kontra = (function () {
         this.flow == 'column'
           ? 1
           : this.flow == 'row'
-          ? children.length
-          : this.numCols);
+            ? children.length
+            : this.numCols);
 
       let row = 0;
       let col = 0;
@@ -5649,17 +5649,6 @@ var kontra = (function () {
     });
   }
 
-  /**
-   * A fast and memory efficient [object pool](https://gameprogrammingpatterns.com/object-pool.html) for sprite reuse. Perfect for particle systems or SHUMPs. The pool starts out with just one object, but will grow in size to accommodate as many objects as are needed.
-   *
-   * <canvas width="600" height="200" id="pool-example"></canvas>
-   * <script src="assets/js/pool.js"></script>
-   * @class Pool
-   *
-   * @param {Object} properties - Properties of the pool.
-   * @param {() => {update: (dt?: Number) => void, render: Function, init: (properties?: Object) => void, isAlive: () => boolean}} properties.create - Function that returns a new object to be added to the pool when there are no more alive objects.
-   * @param {Number} [properties.maxSize=1024] - The maximum number of objects allowed in the pool. The pool will never grow beyond this size.
-   */
   class Pool {
     /**
      * @docs docs/api_docs/pool.js
@@ -5792,7 +5781,7 @@ var kontra = (function () {
     update(dt) {
       let obj;
       let doSort = false;
-      for (let i = this.size; i--; ) {
+      for (let i = this.size; i--;) {
         obj = this.objects[i];
 
         obj.update(dt);
@@ -5814,7 +5803,7 @@ var kontra = (function () {
      * @function render
      */
     render() {
-      for (let i = this.size; i--; ) {
+      for (let i = this.size; i--;) {
         this.objects[i].render();
       }
     }
@@ -6625,7 +6614,7 @@ var kontra = (function () {
      * @memberof Scene
      * @function onShow
      */
-    onShow() {}
+    onShow() { }
 
     /**
      * Function called when the scene is hidden. Override this function to have the scene do something when hidden, such as cleaning up input events.
@@ -6642,7 +6631,7 @@ var kontra = (function () {
      * @memberof Scene
      * @function onHide
      */
-    onHide() {}
+    onHide() { }
   }
 
   function factory$2() {
diff --git a/node_modules/kontra/kontra.mjs b/node_modules/kontra/kontra.mjs
index 954082f..8cb7596 100644
--- a/node_modules/kontra/kontra.mjs
+++ b/node_modules/kontra/kontra.mjs
@@ -354,7 +354,7 @@ function depthSort(obj1, obj2, prop = 'y') {
   return obj1[prop] - obj2[prop];
 }
 
-let noop = () => {};
+let noop = () => { };
 
 // style used for DOM nodes needed for screen readers
 let srOnlyStyle =
@@ -1112,7 +1112,7 @@ function loadImage(url) {
       imageAssets[getName(url)] =
         imageAssets[resolvedUrl] =
         imageAssets[fullUrl] =
-          this;
+        this;
       emit('assetLoaded', this, url);
       resolve(this);
     };
@@ -1170,8 +1170,8 @@ function loadAudio(url) {
           playableSource
             ? playableSource
             : canPlay[getExtension(source)]
-            ? source
-            : null,
+              ? source
+              : null,
         0
       ); // 0 is the shortest falsy value
 
@@ -1191,7 +1191,7 @@ function loadAudio(url) {
       audioAssets[getName(url)] =
         audioAssets[resolvedUrl] =
         audioAssets[fullUrl] =
-          this;
+        this;
       emit('assetLoaded', this, url);
       resolve(this);
     });
@@ -1251,7 +1251,7 @@ function loadData(url) {
       dataAssets[getName(url)] =
         dataAssets[resolvedUrl] =
         dataAssets[fullUrl] =
-          response;
+        response;
       emit('assetLoaded', response, url);
       return response;
     });
@@ -1290,8 +1290,8 @@ function load(...urls) {
       return extension.match(imageRegex)
         ? loadImage(asset)
         : extension.match(audioRegex)
-        ? loadAudio(asset)
-        : loadData(asset);
+          ? loadAudio(asset)
+          : loadData(asset);
     })
   );
 }
@@ -1774,7 +1774,7 @@ class Updatable {
   }
   // @endif
 
-  _pc() {}
+  _pc() { }
 }
 
 /**
@@ -2174,7 +2174,7 @@ class GameObject extends Updatable {
    * @memberof GameObject
    * @function draw
    */
-  draw() {}
+  draw() { }
 
   /**
    * Sync property changes from the parent to the child
@@ -3004,8 +3004,8 @@ class Text extends GameObject {
       textAlign == 'right'
         ? this.width
         : textAlign == 'center'
-        ? (this.width / 2) | 0
-        : 0;
+          ? (this.width / 2) | 0
+          : 0;
     // @endif
 
     this._s.map((str, index) => {
@@ -3235,12 +3235,12 @@ function getCanvasOffset(pointer) {
       rect.left +
       (getPropValue(_s, 'border-left-width') +
         getPropValue(_s, 'padding-left')) *
-        transformScaleX,
+      transformScaleX,
     offsetY:
       rect.top +
       (getPropValue(_s, 'border-top-width') +
         getPropValue(_s, 'padding-top')) *
-        transformScaleY
+      transformScaleY
   };
 }
 
@@ -3893,28 +3893,28 @@ class Button extends Sprite {
    * @memberof Button
    * @function onEnable
    */
-  onEnable() {}
+  onEnable() { }
 
   /**
    * Function called when then button is disabled. Override this function to have the button do something when disabled.
    * @memberof Button
    * @function onDisable
    */
-  onDisable() {}
+  onDisable() { }
 
   /**
    * Function called when then button is focused. Override this function to have the button do something when focused.
    * @memberof Button
    * @function onFocus
    */
-  onFocus() {}
+  onFocus() { }
 
   /**
    * Function called when then button is blurred. Override this function to have the button do something when blurred.
    * @memberof Button
    * @function onBlur
    */
-  onBlur() {}
+  onBlur() { }
 
   onDown() {
     if (!this.disabled) {
@@ -4299,8 +4299,8 @@ function updateGamepad() {
   let pads = navigator.getGamepads
     ? navigator.getGamepads()
     : navigator.webkitGetGamepads
-    ? navigator.webkitGetGamepads
-    : [];
+      ? navigator.webkitGetGamepads
+      : [];
 
   for (let i = 0; i < pads.length; i++) {
     let gamepad = pads[i];
@@ -4647,8 +4647,8 @@ let gestureMap = {
           ? 'left'
           : 'right'
         : y < 0
-        ? 'up'
-        : 'down';
+          ? 'up'
+          : 'down';
     }
   },
   pinch: {
@@ -4983,8 +4983,8 @@ class Grid extends GameObject {
       this.flow == 'column'
         ? 1
         : this.flow == 'row'
-        ? children.length
-        : this.numCols);
+          ? children.length
+          : this.numCols);
 
     let row = 0;
     let col = 0;
@@ -5647,17 +5647,6 @@ function extendObject(kontraObj, properties) {
   });
 }
 
-/**
- * A fast and memory efficient [object pool](https://gameprogrammingpatterns.com/object-pool.html) for sprite reuse. Perfect for particle systems or SHUMPs. The pool starts out with just one object, but will grow in size to accommodate as many objects as are needed.
- *
- * <canvas width="600" height="200" id="pool-example"></canvas>
- * <script src="assets/js/pool.js"></script>
- * @class Pool
- *
- * @param {Object} properties - Properties of the pool.
- * @param {() => {update: (dt?: Number) => void, render: Function, init: (properties?: Object) => void, isAlive: () => boolean}} properties.create - Function that returns a new object to be added to the pool when there are no more alive objects.
- * @param {Number} [properties.maxSize=1024] - The maximum number of objects allowed in the pool. The pool will never grow beyond this size.
- */
 class Pool {
   /**
    * @docs docs/api_docs/pool.js
@@ -5790,7 +5779,7 @@ class Pool {
   update(dt) {
     let obj;
     let doSort = false;
-    for (let i = this.size; i--; ) {
+    for (let i = this.size; i--;) {
       obj = this.objects[i];
 
       obj.update(dt);
@@ -5812,7 +5801,7 @@ class Pool {
    * @function render
    */
   render() {
-    for (let i = this.size; i--; ) {
+    for (let i = this.size; i--;) {
       this.objects[i].render();
     }
   }
@@ -6623,7 +6612,7 @@ class Scene {
    * @memberof Scene
    * @function onShow
    */
-  onShow() {}
+  onShow() { }
 
   /**
    * Function called when the scene is hidden. Override this function to have the scene do something when hidden, such as cleaning up input events.
@@ -6640,7 +6629,7 @@ class Scene {
    * @memberof Scene
    * @function onHide
    */
-  onHide() {}
+  onHide() { }
 }
 
 function factory$2() {
